if (process.env.ENV !== "DEV") {
  var privatekeyPath = 'privatekey.pem';
  var certPath = 'server.crt';

  // Check if private key file exists before reading
  if (!fs.existsSync(privatekeyPath) || !fs.existsSync(certPath)) {
    console.error("Error: SSL certificate or private key not found!");
    process.exit(1);
  }

  var privatekey = fs.readFileSync(privatekeyPath, "utf8");
  var cert = fs.readFileSync(certPath, "utf8");

  if (!privatekey || !cert) {
    console.error("Error: SSL files are empty!");
    process.exit(1);
  }

  var header = "-----BEGIN PRIVATE KEY-----";
  var footer = "-----END PRIVATE KEY-----";

  if (privatekey.includes(header) && privatekey.includes(footer)) {
    privatekey = privatekey.split(header)[1].split(footer)[0];
    privatekey = header + "\n" + privatekey.replace(/ /g, "\n") + footer + "\n";
  } else {
    console.error("Error: Invalid private key format!");
    process.exit(1);
  }

  var certHeader = "-----BEGIN CERTIFICATE-----";
  var certFooter = "-----END CERTIFICATE-----";

  if (cert.includes(certHeader) && cert.includes(certFooter)) {
    cert = cert.split(certHeader)[1].split(certFooter)[0];
    cert = certHeader + "\n" + cert.replace(/ /g, "\n") + certFooter + "\n";
  } else {
    console.error("Error: Invalid certificate format!");
    process.exit(1);
  }

  var options = {
    key: privatekey,
    cert: cert
  };

  app.set("port", https_port);
  var server = https.createServer(options, app).listen(https_port, function () {
    console.log('Server running on HTTPS port ' + https_port);
  });

  server.on('error', onError);
  server.on('listening', onListening);

  // Redirect HTTP to HTTPS
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port, https_port) + req.url });
    res.end();
  }).listen(port);
} else {
  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
